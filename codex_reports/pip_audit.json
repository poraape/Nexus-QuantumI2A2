{"dependencies": [{"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.12.13", "vulns": [{"id": "GHSA-9548-qrrj-x5pj", "fix_versions": ["3.12.14"], "aliases": ["CVE-2025-53643"], "description": "### Summary The Python parser is vulnerable to a request smuggling vulnerability due to not parsing trailer sections of an HTTP request.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or AIOHTTP_NO_EXTENSIONS is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  ----  Patch: https://github.com/aio-libs/aiohttp/commit/e8d774f635dc6d1cd3174d0e38891da5de0e2b6a"}]}, {"name": "aiosignal", "version": "1.3.2", "vulns": []}, {"name": "altair", "version": "5.5.0", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.9.0", "vulns": []}, {"name": "appdirs", "version": "1.4.4", "vulns": []}, {"name": "asttokens", "version": "3.0.0", "vulns": []}, {"name": "attrs", "version": "25.3.0", "vulns": []}, {"name": "auth0-python", "version": "4.10.0", "vulns": []}, {"name": "babel", "version": "2.17.0", "vulns": []}, {"name": "backoff", "version": "2.2.1", "vulns": []}, {"name": "backrefs", "version": "5.9", "vulns": []}, {"name": "bandit", "version": "1.8.6", "vulns": []}, {"name": "bcrypt", "version": "4.3.0", "vulns": []}, {"name": "blinker", "version": "1.9.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "boto3", "version": "1.35.78", "vulns": []}, {"name": "botocore", "version": "1.35.99", "vulns": []}, {"name": "build", "version": "1.2.2.post1", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "5.5.2", "vulns": []}, {"name": "certifi", "version": "2025.6.15", "vulns": []}, {"name": "cffi", "version": "1.17.1", "vulns": []}, {"name": "cfgv", "version": "3.4.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.2", "vulns": []}, {"name": "choreographer", "version": "1.1.2", "vulns": []}, {"name": "chromadb", "version": "1.0.13", "vulns": []}, {"name": "click", "version": "8.2.1", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "coloredlogs", "version": "15.0.1", "vulns": []}, {"name": "crewai", "version": "0.134.0", "vulns": []}, {"name": "crewai-tools", "version": "0.0.1", "vulns": []}, {"name": "cryptography", "version": "43.0.1", "vulns": [{"id": "GHSA-79v4-65xg-pq4g", "fix_versions": ["44.0.1"], "aliases": ["CVE-2024-12797"], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 42.0.0-44.0.0 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://openssl-library.org/news/secadv/20250211.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}]}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "dataclasses-json", "version": "0.6.7", "vulns": []}, {"name": "decorator", "version": "5.2.1", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "distlib", "version": "0.3.9", "vulns": []}, {"name": "distro", "version": "1.9.0", "vulns": []}, {"name": "dnspython", "version": "2.8.0", "vulns": []}, {"name": "docstring-parser", "version": "0.16", "vulns": []}, {"name": "durationpy", "version": "0.10", "vulns": []}, {"name": "ecdsa", "version": "0.19.1", "vulns": [{"id": "GHSA-wj6h-64fc-37mp", "fix_versions": [], "aliases": ["CVE-2024-23342"], "description": "python-ecdsa has been found to be subject to a Minerva timing attack on the P-256 curve. Using the `ecdsa.SigningKey.sign_digest()` API function and timing signatures an attacker can leak the internal nonce which may allow for private key discovery. Both ECDSA signatures, key generation, and ECDH operations are affected. ECDSA signature verification is unaffected. The python-ecdsa project considers side channel attacks out of scope for the project and there is no planned fix."}]}, {"name": "email-validator", "version": "2.3.0", "vulns": []}, {"name": "et-xmlfile", "version": "2.0.0", "vulns": []}, {"name": "executing", "version": "2.2.0", "vulns": []}, {"name": "fastapi", "version": "0.115.6", "vulns": []}, {"name": "filelock", "version": "3.18.0", "vulns": []}, {"name": "filetype", "version": "1.2.0", "vulns": []}, {"name": "flatbuffers", "version": "25.2.10", "vulns": []}, {"name": "frozenlist", "version": "1.7.0", "vulns": []}, {"name": "fsspec", "version": "2025.5.1", "vulns": []}, {"name": "ghp-import", "version": "2.1.0", "vulns": []}, {"name": "gitdb", "version": "4.0.12", "vulns": []}, {"name": "gitpython", "version": "3.1.44", "vulns": []}, {"name": "google-ai-generativelanguage", "version": "0.6.15", "vulns": []}, {"name": "google-api-core", "version": "2.25.1", "vulns": []}, {"name": "google-api-python-client", "version": "2.174.0", "vulns": []}, {"name": "google-auth", "version": "2.40.3", "vulns": []}, {"name": "google-auth-httplib2", "version": "0.2.0", "vulns": []}, {"name": "google-auth-oauthlib", "version": "1.2.2", "vulns": []}, {"name": "google-generativeai", "version": "0.8.5", "vulns": []}, {"name": "googleapis-common-protos", "version": "1.70.0", "vulns": []}, {"name": "greenlet", "version": "3.2.3", "vulns": []}, {"name": "grpcio", "version": "1.73.0", "vulns": []}, {"name": "grpcio-status", "version": "1.71.2", "vulns": []}, {"name": "gspread", "version": "6.2.1", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httplib2", "version": "0.22.0", "vulns": []}, {"name": "httptools", "version": "0.6.4", "vulns": []}, {"name": "httpx", "version": "0.28.1", "vulns": []}, {"name": "httpx-sse", "version": "0.4.0", "vulns": []}, {"name": "huggingface-hub", "version": "0.33.1", "vulns": []}, {"name": "humanfriendly", "version": "10.0", "vulns": []}, {"name": "identify", "version": "2.6.12", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "importlib-metadata", "version": "8.7.0", "vulns": []}, {"name": "importlib-resources", "version": "6.5.2", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "instructor", "version": "1.9.0", "vulns": []}, {"name": "ipython", "version": "9.3.0", "vulns": []}, {"name": "ipython-pygments-lexers", "version": "1.1.1", "vulns": []}, {"name": "jedi", "version": "0.19.2", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "jiter", "version": "0.10.0", "vulns": []}, {"name": "jmespath", "version": "1.0.1", "vulns": []}, {"name": "json-repair", "version": "0.47.4", "vulns": []}, {"name": "json5", "version": "0.12.0", "vulns": []}, {"name": "jsonpatch", "version": "1.33", "vulns": []}, {"name": "jsonpickle", "version": "4.1.1", "vulns": []}, {"name": "jsonpointer", "version": "3.0.0", "vulns": []}, {"name": "jsonref", "version": "1.1.0", "vulns": []}, {"name": "jsonschema", "version": "4.24.0", "vulns": []}, {"name": "jsonschema-specifications", "version": "2025.4.1", "vulns": []}, {"name": "kaleido", "version": "1.1.0", "vulns": []}, {"name": "kubernetes", "version": "33.1.0", "vulns": []}, {"name": "langchain", "version": "0.3.26", "vulns": []}, {"name": "langchain-community", "version": "0.3.26", "vulns": [{"id": "GHSA-pc6w-59fv-rh23", "fix_versions": ["0.3.27"], "aliases": ["CVE-2025-6984"], "description": "The langchain-ai/langchain project, specifically the EverNoteLoader component, is vulnerable to XML External Entity (XXE) attacks due to insecure XML parsing. The vulnerability arises from the use of etree.iterparse() without disabling external entity references, which can lead to sensitive information disclosure. An attacker could exploit this by crafting a malicious XML payload that references local files, potentially exposing sensitive data such as /etc/passwd. This issue has been fixed in 0.3.27 of langchain-community."}]}, {"name": "langchain-core", "version": "0.3.66", "vulns": []}, {"name": "langchain-experimental", "version": "0.3.4", "vulns": []}, {"name": "langchain-google-genai", "version": "2.0.10", "vulns": []}, {"name": "langchain-text-splitters", "version": "0.3.8", "vulns": [{"id": "GHSA-m42m-m8cr-8m58", "fix_versions": ["0.3.9"], "aliases": ["CVE-2025-6985"], "description": "The HTMLSectionSplitter class in langchain-text-splitters is vulnerable to XML External Entity (XXE) attacks due to unsafe XSLT parsing. This vulnerability arises because the class allows the use of arbitrary XSLT stylesheets, which are parsed using lxml.etree.parse() and lxml.etree.XSLT() without any hardening measures. In lxml versions up to 4.9.x, external entities are resolved by default, allowing attackers to read arbitrary local files or perform outbound HTTP(S) fetches. In lxml versions 5.0 and above, while entity expansion is disabled, the XSLT document() function can still read any URI unless XSLTAccessControl is applied. This vulnerability allows remote attackers to gain read-only access to any file the LangChain process can reach, including sensitive files such as SSH keys, environment files, source code, or cloud metadata. No authentication, special privileges, or user interaction are required, and the issue is exploitable in default deployments that enable custom XSLT."}]}, {"name": "langsmith", "version": "0.4.1", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "litellm", "version": "1.72.0", "vulns": []}, {"name": "logistro", "version": "2.0.0", "vulns": []}, {"name": "mando", "version": "0.7.1", "vulns": []}, {"name": "markdown", "version": "3.8.2", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "marshmallow", "version": "3.26.1", "vulns": []}, {"name": "matplotlib-inline", "version": "0.1.7", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "mergedeep", "version": "1.3.4", "vulns": []}, {"name": "mkdocs", "version": "1.6.1", "vulns": []}, {"name": "mkdocs-get-deps", "version": "0.2.0", "vulns": []}, {"name": "mkdocs-material", "version": "9.6.14", "vulns": []}, {"name": "mkdocs-material-extensions", "version": "1.3.1", "vulns": []}, {"name": "mmh3", "version": "5.1.0", "vulns": []}, {"name": "mpmath", "version": "1.3.0", "vulns": []}, {"name": "msgpack", "version": "1.1.2", "vulns": []}, {"name": "multidict", "version": "6.5.0", "vulns": []}, {"name": "mypy", "version": "1.18.2", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "narwhals", "version": "1.43.1", "vulns": []}, {"name": "networkx", "version": "3.5", "vulns": []}, {"name": "nodeenv", "version": "1.9.1", "vulns": []}, {"name": "numpy", "version": "2.3.1", "vulns": []}, {"name": "oauthlib", "version": "3.3.1", "vulns": []}, {"name": "ollama", "version": "0.5.1", "vulns": []}, {"name": "onnxruntime", "version": "1.22.0", "vulns": []}, {"name": "openai", "version": "1.93.0", "vulns": []}, {"name": "openpyxl", "version": "3.1.5", "vulns": []}, {"name": "opentelemetry-api", "version": "1.34.1", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-common", "version": "1.34.1", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-grpc", "version": "1.34.1", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-http", "version": "1.34.1", "vulns": []}, {"name": "opentelemetry-proto", "version": "1.34.1", "vulns": []}, {"name": "opentelemetry-sdk", "version": "1.34.1", "vulns": []}, {"name": "opentelemetry-semantic-conventions", "version": "0.55b1", "vulns": []}, {"name": "orjson", "version": "3.10.15", "vulns": []}, {"name": "overrides", "version": "7.7.0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.5", "vulns": []}, {"name": "packaging", "version": "24.2", "vulns": []}, {"name": "paginate", "version": "0.5.7", "vulns": []}, {"name": "pandas", "version": "2.3.0", "vulns": []}, {"name": "parso", "version": "0.8.4", "vulns": []}, {"name": "passlib", "version": "1.7.4", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "pdfminer-six", "version": "20250506", "vulns": []}, {"name": "pdfplumber", "version": "0.11.7", "vulns": []}, {"name": "pillow", "version": "11.1.0", "vulns": []}, {"name": "pip", "version": "25.2", "vulns": [{"id": "GHSA-4xh5-x5gv-qwph", "fix_versions": [], "aliases": ["CVE-2025-8869"], "description": "### Summary  In the fallback extraction path for source distributions, `pip` used Python\u2019s `tarfile` module without verifying that symbolic/hard link targets resolve inside the intended extraction directory. A malicious sdist can include links that escape the target directory and overwrite arbitrary files on the invoking host during `pip install`.  ### Impact  Successful exploitation enables arbitrary file overwrite outside the build/extraction directory on the machine running `pip`. This can be leveraged to tamper with configuration or startup files and may lead to further code execution depending on the environment, but the direct, guaranteed impact is integrity compromise on the vulnerable system.  ### Conditions  The issue is triggered when installing an attacker-controlled sdist (e.g., from an index or URL) and the fallback extraction code path is used. No special privileges are required beyond running `pip install`; active user action is necessary.  ### Remediation  The [fix](https://github.com/pypa/pip/pull/13550), while available as a patch that can be manually applied, has not yet been put into a numbered version but is planned for `25.3`. Using a Python interpreter that implements the safe-extraction behavior described by **PEP 706** provides additional defense in depth for other `tarfile` issues but is not a substitute for upgrading pip for this specific flaw."}]}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "plotly", "version": "6.3.1", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "posthog", "version": "6.0.0", "vulns": []}, {"name": "pre-commit", "version": "4.2.0", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.51", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "proto-plus", "version": "1.26.1", "vulns": []}, {"name": "protobuf", "version": "5.29.5", "vulns": []}, {"name": "pure-eval", "version": "0.2.3", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "pyarrow", "version": "20.0.0", "vulns": []}, {"name": "pyasn1", "version": "0.6.1", "vulns": []}, {"name": "pyasn1-modules", "version": "0.4.2", "vulns": []}, {"name": "pybase64", "version": "1.4.1", "vulns": []}, {"name": "pycparser", "version": "2.22", "vulns": []}, {"name": "pydantic", "version": "1.10.19", "vulns": []}, {"name": "pydantic-core", "version": "2.33.2", "vulns": []}, {"name": "pydantic-settings", "version": "2.10.0", "vulns": []}, {"name": "pydeck", "version": "0.9.1", "vulns": []}, {"name": "pygments", "version": "2.19.2", "vulns": []}, {"name": "pyjwt", "version": "2.10.1", "vulns": []}, {"name": "pymdown-extensions", "version": "10.16", "vulns": []}, {"name": "pyparsing", "version": "3.2.3", "vulns": []}, {"name": "pypdfium2", "version": "4.30.1", "vulns": []}, {"name": "pypika", "version": "0.48.9", "vulns": []}, {"name": "pyproject-hooks", "version": "1.2.0", "vulns": []}, {"name": "pyreadline3", "version": "3.5.4", "vulns": []}, {"name": "pytesseract", "version": "0.3.13", "vulns": []}, {"name": "pytest", "version": "8.3.4", "vulns": []}, {"name": "pytest-timeout", "version": "2.4.0", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.1.0", "vulns": []}, {"name": "python-jose", "version": "3.3.0", "vulns": [{"id": "PYSEC-2024-232", "fix_versions": ["3.4.0"], "aliases": ["CVE-2024-33663"], "description": "python-jose through 3.3.0 has algorithm confusion with OpenSSH ECDSA keys and other key formats. This is similar to CVE-2022-29217."}, {"id": "PYSEC-2024-233", "fix_versions": ["3.4.0"], "aliases": ["CVE-2024-33664"], "description": "python-jose through 3.3.0 allows attackers to cause a denial of service (resource consumption) during a decode via a crafted JSON Web Encryption (JWE) token with a high compression ratio, aka a \"JWT bomb.\" This is similar to CVE-2024-21319."}]}, {"name": "python-multipart", "version": "0.0.17", "vulns": [{"id": "GHSA-59g5-xgcq-4qw3", "fix_versions": ["0.0.18"], "aliases": ["CVE-2024-53981"], "description": "### Summary  When parsing form data, `python-multipart` skips line breaks (CR `\\r` or LF `\\n`) in front of the first boundary and any tailing bytes after the last boundary. This happens one byte at a time and emits a log event each time, which may cause excessive logging for certain inputs.  An attacker could abuse this by sending a malicious request with lots of data before the first or after the last boundary, causing high CPU load and stalling the processing thread for a significant amount of time. In case of ASGI application, this could stall the event loop and prevent other requests from being processed, resulting in a denial of service (DoS).  ### Impact  Applications that use `python-multipart` to parse form data (or use frameworks that do so) are affected.   ### Original Report  This security issue was reported by: - GitHub security advisory in Starlette on October 30 by @Startr4ck - Email to `python-multipart` maintainer on October 3 by @mnqazi"}]}, {"name": "pytz", "version": "2025.2", "vulns": []}, {"name": "pyvis", "version": "0.3.2", "vulns": []}, {"name": "pyyaml", "version": "6.0.2", "vulns": []}, {"name": "pyyaml-env-tag", "version": "1.1", "vulns": []}, {"name": "radon", "version": "6.0.1", "vulns": []}, {"name": "referencing", "version": "0.36.2", "vulns": []}, {"name": "regex", "version": "2024.11.6", "vulns": []}, {"name": "reportlab", "version": "4.4.4", "vulns": []}, {"name": "requests", "version": "2.32.4", "vulns": []}, {"name": "requests-oauthlib", "version": "2.0.0", "vulns": []}, {"name": "requests-toolbelt", "version": "1.0.0", "vulns": []}, {"name": "rich", "version": "14.0.0", "vulns": []}, {"name": "rpds-py", "version": "0.25.1", "vulns": []}, {"name": "rsa", "version": "4.9.1", "vulns": []}, {"name": "ruff", "version": "0.14.2", "vulns": []}, {"name": "s3transfer", "version": "0.10.4", "vulns": []}, {"name": "safetensors", "version": "0.5.3", "vulns": []}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "shellingham", "version": "1.5.4", "vulns": []}, {"name": "simplejson", "version": "3.20.2", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "smmap", "version": "5.0.2", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "sqlalchemy", "version": "2.0.41", "vulns": []}, {"name": "stack-data", "version": "0.6.3", "vulns": []}, {"name": "starlette", "version": "0.41.3", "vulns": [{"id": "GHSA-2c2j-9gv5-cj73", "fix_versions": ["0.47.2"], "aliases": ["CVE-2025-54121"], "description": "### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \"_rolled\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact."}]}, {"name": "stevedore", "version": "5.5.0", "vulns": []}, {"name": "streamlit", "version": "1.46.0", "vulns": []}, {"name": "sympy", "version": "1.14.0", "vulns": []}, {"name": "tenacity", "version": "9.1.2", "vulns": []}, {"name": "tiktoken", "version": "0.9.0", "vulns": []}, {"name": "tokenizers", "version": "0.21.2", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomli", "version": "2.2.1", "vulns": []}, {"name": "tomli-w", "version": "1.2.0", "vulns": []}, {"name": "torch", "version": "2.7.1", "vulns": [{"id": "GHSA-887c-mr87-cxwp", "fix_versions": ["2.8.0"], "aliases": ["CVE-2025-3730"], "description": "A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue."}]}, {"name": "tornado", "version": "6.5.1", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "traitlets", "version": "5.14.3", "vulns": []}, {"name": "transformers", "version": "4.53.1", "vulns": []}, {"name": "typer", "version": "0.16.0", "vulns": []}, {"name": "types-colorama", "version": "0.4.15.20250801", "vulns": []}, {"name": "types-decorator", "version": "5.2.0.20250324", "vulns": []}, {"name": "types-defusedxml", "version": "0.7.0.20250822", "vulns": []}, {"name": "types-docutils", "version": "0.22.2.20251006", "vulns": []}, {"name": "types-greenlet", "version": "3.2.0.20250915", "vulns": []}, {"name": "types-passlib", "version": "1.7.7.20250602", "vulns": []}, {"name": "types-pexpect", "version": "4.9.0.20250916", "vulns": []}, {"name": "types-psycopg2", "version": "2.9.21.20251012", "vulns": []}, {"name": "types-pyasn1", "version": "0.6.0.20250914", "vulns": []}, {"name": "types-pycurl", "version": "7.45.7.20250926", "vulns": []}, {"name": "types-pygments", "version": "2.19.0.20250809", "vulns": []}, {"name": "types-python-jose", "version": "3.5.0.20250531", "vulns": []}, {"name": "types-pywin32", "version": "311.0.0.20251008", "vulns": []}, {"name": "types-pyyaml", "version": "6.0.12.20250915", "vulns": []}, {"name": "types-ujson", "version": "5.10.0.20250822", "vulns": []}, {"name": "typing-extensions", "version": "4.14.0", "vulns": []}, {"name": "typing-inspect", "version": "0.9.0", "vulns": []}, {"name": "typing-inspection", "version": "0.4.1", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "uritemplate", "version": "4.2.0", "vulns": []}, {"name": "urllib3", "version": "2.5.0", "vulns": []}, {"name": "uv", "version": "0.7.16", "vulns": [{"id": "GHSA-8qf3-x8v5-2pj8", "fix_versions": ["0.8.6"], "aliases": ["CVE-2025-54368"], "description": "## Impact  In versions 0.8.5 and earlier of uv, remote ZIP archives were handled in a streamwise fashion, and file entries were not reconciled against the archive's central directory. This enabled two parser differentials against other Python package installers:  1. An attacker could contrive a ZIP archive that would extract with legitimate contents on some package installers, and malicious contents on others due to multiple local file entries. The attacker could choose which installer to target. 2. An attacker could contrive a \"stacked\" ZIP input with multiple internal ZIPs, which would be handled differently by different package installers. The attacker could choose which installer to target.  In both cases, the outcome is that an attacker can produce a ZIP with a consistent digest that expands differently with different installers.  The [ZIP standard](https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT) is ambiguous with respect to these behavior differentials. Consequently, these same differentials may be accepted ZIP parsers other than those used in uv. This advisory is for uv in particular, but all consumers of ZIP-based Python package distributions, e.g., pip, are potentially susceptible to similar parser differentials in other ZIP parsers.  The practical impact of these differentials is limited by a number of factors:  - To be compromised via this vulnerability, user interaction of some sort is required. In particular, the user must run `uv install $package` with an attacker-controlled `$package`. - When using wheel distributions, installation of the malicious package is not sufficient for execution of malicious code, the vicim would need to perform a separate invocation, e.g., `python -c \"import $package\"`. - If a ZIP-based source distribution (which are less common than tarball source distributions), is encountered, malicious code can be executed during package resolution or installation. uv may invoke the malicious code when building the source distribution into a wheel. - The practical impact of these differentials is limited by a coordinated fix to [Warehouse](https://github.com/pypi/warehouse), PyPI's backend: Warehouse now rejects ZIPs exhibiting these differentials, limiting the ability of an attacker to distribute malicious ZIP distributions via PyPI. As part of that coordinated fix, a review of Warehouse revealed no evidence of exploitation.  ## Patches  Versions 0.8.6 and newer of uv address both of the parser differentials above, by refusing to process ZIPs with duplicated local file entries or stacked contents.  ## Workarounds  Users are advised to upgrade to 0.8.6 or newer to address this advisory.  Most users should experience no breaking changes as a result of the patch above. However, users who do experience breakage should carefully review their distributions for signs of malicious intent. Users may choose to set `UV_INSECURE_NO_ZIP_VALIDATION=1` to revert to the previous behavior.  ## Attribution  This vulnerability was discovered separately by two different individuals: Caleb Brown (Google) and Tim Hatch (Netflix)."}, {"id": "GHSA-w476-p2h3-79g9", "fix_versions": ["0.9.5"], "aliases": [], "description": "### Impact  In versions 0.9.4 and earlier of uv, tar archives containing PAX headers with file size overrides were not handled properly. As a result, an attacker could contrive a source distribution (as a tar archive) that would extract differently when installed via uv versus other Python package installers.  The underlying parsing differential here originates with astral-tokio-tar, which disclosed this vulnerability as CVE-2025-62518.  In practice, the impact of this vulnerability is **low**: only source distributions can be formatted as tar archives, and source distributions execute arbitrary code at build/installation time by definition. Consequently, a parser differential in tar extraction is strictly less powerful than the capabilities already exposed to an attacker who has the ability to control source distributions.   However, this particular source of malleability in source distributions is unintentional and not operating by design, and therefore we consider it a vulnerability despite its overlap in capabilities with intended behavior.  ### Patches  Versions 0.9.5 and newer of uv address the vulnerability above. Users should upgrade to 0.9.5 or newer.  ### Workarounds  Users are advised to upgrade to version 0.9.5 or newer to address this advisory.  Users should experience no breaking changes as a result of the patch above.  ### References  * See CVE-2025-62518 for the corresponding advisory against astral-tokio-tar"}]}, {"name": "uvicorn", "version": "0.34.0", "vulns": []}, {"name": "virtualenv", "version": "20.31.2", "vulns": []}, {"name": "watchdog", "version": "6.0.0", "vulns": []}, {"name": "watchfiles", "version": "1.1.0", "vulns": []}, {"name": "wcwidth", "version": "0.2.13", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "wheel", "version": "0.45.1", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}, {"name": "zipp", "version": "3.23.0", "vulns": []}, {"name": "zstandard", "version": "0.23.0", "vulns": []}], "fixes": []}
