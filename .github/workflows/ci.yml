name: Quality Gate

on:
  push:
    branches: [ main ]
  pull_request:

env:
  NODE_VERSION: '20'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm test -- --runInBand
      - name: Run end-to-end smoke tests
        run: npm run e2e

  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: npm ci
      - name: Run coverage suite
        run: npm test -- --coverage --runInBand
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: |
            coverage/lcov-report
            coverage/coverage-final.json
            coverage/coverage-summary.json

  security:
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - uses: actions/checkout@v4
      - name: Prepare security report directory
        run: mkdir -p reports/security
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install npm dependencies
        run: npm ci
      - name: Run npm audit
        run: |
          npm audit --json > reports/security/npm-audit.json || (cat reports/security/npm-audit.json && exit 1)
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
      - name: Run pip-audit
        run: |
          pip-audit -r backend/requirements.txt -f json -o reports/security/pip-audit.json || (cat reports/security/pip-audit.json && exit 1)
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-audits
          path: reports/security

  performance:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: grafana/setup-k6-action@v1
      - name: Install frontend dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Start preview server
        run: npm run preview -- --host 0.0.0.0 --port 4173 &
      - name: Wait for preview
        run: npx wait-on http://127.0.0.1:4173
      - name: Ensure performance report directory
        run: mkdir -p reports/performance/lighthouse
      - name: Execute k6 load test
        env:
          K6_BASE_URL: http://127.0.0.1:4173
        run: |
          k6 run load-tests/pipeline.load.js --summary-export=reports/performance/k6-summary.json
      - name: Install Lighthouse CI
        run: npm install --no-save @lhci/cli@0.13.1
      - name: Run Lighthouse audits
        run: |
          npx lhci collect --config=.github/lighthouse/lighthouserc.json
          npx lhci assert --config=.github/lighthouse/lighthouserc.json
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: coverage
      - name: Publish quality report
        env:
          AUDIT_BACKEND_URL: ${{ secrets.AUDIT_BACKEND_URL }}
        run: npm run report:quality
      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-audits
          path: |
            reports/performance/k6-summary.json
            reports/performance/lighthouse
      - name: Stop preview server
        if: always()
        run: pkill -f "vite preview" || true

  deploy:
    runs-on: ubuntu-latest
    needs: performance
    steps:
      - name: Await quality gate
        run: echo "All gates passed. Ready to deploy."
